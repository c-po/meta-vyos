--- a/Documentation/networking/ip-sysctl.txt	2018-03-11 08:23:23.000000000 -0700
+++ b/Documentation/networking/ip-sysctl.txt	2018-03-18 08:49:58.000000000 -0700
@@ -1142,6 +1142,19 @@ rp_filter - INTEGER
 	Default value is 0. Note that some distributions enable it
 	in startup scripts.
 
+link_filter - INTEGER
+        0 - Allow packets to be received for the address on this interface
+	even if interface is disabled or no carrier.
+
+	1 - Ignore packets received if interface associated with the incoming
+	address is down.
+
+	2 - Ignore packets received if interface associated with the incoming
+	address is down or has no carrier.
+
+	Default value is 0. Note that some distributions enable it
+	in startup scripts.
+
 arp_filter - BOOLEAN
 	1 - Allows you to have multiple network interfaces on the same
 	subnet, and have the ARPs for each interface be answered
--- a/include/linux/inetdevice.h	2018-03-11 08:23:23.000000000 -0700
+++ b/include/linux/inetdevice.h	2018-03-18 08:49:58.000000000 -0700
@@ -130,6 +130,7 @@ static inline void ipv4_devconf_setall(s
 #define IN_DEV_ARP_ANNOUNCE(in_dev)	IN_DEV_MAXCONF((in_dev), ARP_ANNOUNCE)
 #define IN_DEV_ARP_IGNORE(in_dev)	IN_DEV_MAXCONF((in_dev), ARP_IGNORE)
 #define IN_DEV_ARP_NOTIFY(in_dev)	IN_DEV_MAXCONF((in_dev), ARP_NOTIFY)
+#define IN_DEV_LINKFILTER(in_dev)	IN_DEV_MAXCONF((in_dev), LINKFILTER)
 
 struct in_ifaddr {
 	struct hlist_node	hash;
--- a/include/linux/ipv6.h	2018-03-11 08:23:23.000000000 -0700
+++ b/include/linux/ipv6.h	2018-03-18 08:49:58.000000000 -0700
@@ -75,6 +75,7 @@ struct ipv6_devconf {
 	__s32		disable_policy;
 
 	struct ctl_table_header *sysctl_header;
+	__s32		link_filter;	/* Vyatta */
 };
 
 struct ipv6_params {
--- a/include/uapi/linux/ip.h	2018-03-11 08:23:23.000000000 -0700
+++ b/include/uapi/linux/ip.h	2018-03-18 08:49:58.000000000 -0700
@@ -168,6 +168,7 @@ enum
 	IPV4_DEVCONF_IGNORE_ROUTES_WITH_LINKDOWN,
 	IPV4_DEVCONF_DROP_UNICAST_IN_L2_MULTICAST,
 	IPV4_DEVCONF_DROP_GRATUITOUS_ARP,
+	IPV4_DEVCONF_LINKFILTER,	/* Vyatta only */
 	__IPV4_DEVCONF_MAX
 };
 
--- a/include/uapi/linux/ipv6.h	2018-03-11 08:23:23.000000000 -0700
+++ b/include/uapi/linux/ipv6.h	2018-03-18 08:49:58.000000000 -0700
@@ -186,6 +186,7 @@ enum {
 	DEVCONF_ADDR_GEN_MODE,
 	DEVCONF_DISABLE_POLICY,
 	DEVCONF_ACCEPT_RA_RT_INFO_MIN_PLEN,
+	DEVCONF_LINK_FILTER,
 	DEVCONF_MAX
 };
 
--- a/net/ipv4/devinet.c	2018-03-11 08:23:23.000000000 -0700
+++ b/net/ipv4/devinet.c	2018-03-18 08:49:58.000000000 -0700
@@ -2280,6 +2280,8 @@ static struct devinet_sysctl_table {
 					      "route_localnet"),
 		DEVINET_SYSCTL_FLUSHING_ENTRY(DROP_UNICAST_IN_L2_MULTICAST,
 					      "drop_unicast_in_l2_multicast"),
+		/* Vyatta */
+		DEVINET_SYSCTL_RW_ENTRY(LINKFILTER, "link_filter"),
 	},
 };
 
--- a/net/ipv6/addrconf.c	2018-03-11 08:23:23.000000000 -0700
+++ b/net/ipv6/addrconf.c	2018-03-18 08:49:58.000000000 -0700
@@ -5072,6 +5072,7 @@ static inline void ipv6_store_devconf(st
 	array[DEVCONF_ENHANCED_DAD] = cnf->enhanced_dad;
 	array[DEVCONF_ADDR_GEN_MODE] = cnf->addr_gen_mode;
 	array[DEVCONF_DISABLE_POLICY] = cnf->disable_policy;
+	array[DEVCONF_LINK_FILTER] = cnf->link_filter;
 }
 
 static inline size_t inet6_ifla6_size(void)
@@ -6370,6 +6371,14 @@ static const struct ctl_table addrconf_s
 		.mode           = 0644,
 		.proc_handler   = addrconf_sysctl_disable_policy,
 	},
+	/* Vyatta */
+	{
+		.procname	= "link_filter",
+		.data		= &ipv6_devconf.link_filter,
+		.maxlen		= sizeof(int),
+		.mode		= 0644,
+		.proc_handler	= proc_dointvec
+	},
 	{
 		/* sentinel */
 	}
--- a/net/ipv6/route.c	2018-03-11 08:23:23.000000000 -0700
+++ b/net/ipv6/route.c	2018-03-18 08:49:58.000000000 -0700
@@ -613,6 +613,15 @@ static inline int rt6_check_dev(struct r
 	return 0;
 }
 
+static inline int rt6_link_filter(struct rt6_info *rt)
+{
+	struct net_device *dev = rt->dst.dev;
+	int linkf = __in6_dev_get(dev)->cnf.link_filter;
+
+	return (linkf && !netif_running(dev))
+		|| (linkf > 1 && !netif_carrier_ok(dev));
+}
+
 static inline enum rt6_nud_state rt6_check_neigh(struct rt6_info *rt)
 {
 	struct neighbour *neigh;
@@ -652,6 +661,9 @@ static int rt6_score_route(struct rt6_in
 	m = rt6_check_dev(rt, oif);
 	if (!m && (strict & RT6_LOOKUP_F_IFACE))
 		return RT6_NUD_FAIL_HARD;
+	if (rt6_link_filter(rt))
+		return -1;
+
 #ifdef CONFIG_IPV6_ROUTER_PREF
 	m |= IPV6_DECODE_PREF(IPV6_EXTRACT_PREF(rt->rt6i_flags)) << 2;
 #endif

