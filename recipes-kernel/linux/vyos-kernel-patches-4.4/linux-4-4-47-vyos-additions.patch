diff -rupN linux-4.4.47/Documentation/networking/ip-sysctl.txt vyos-kernel/Documentation/networking/ip-sysctl.txt
--- linux-4.4.47/Documentation/networking/ip-sysctl.txt	2017-02-04 00:45:26.000000000 -0800
+++ vyos-kernel/Documentation/networking/ip-sysctl.txt	2017-08-01 16:24:18.256296668 -0700
@@ -1082,6 +1082,19 @@ rp_filter - INTEGER
 	Default value is 0. Note that some distributions enable it
 	in startup scripts.
 
+link_filter - INTEGER
+        0 - Allow packets to be received for the address on this interface
+	even if interface is disabled or no carrier.
+
+	1 - Ignore packets received if interface associated with the incoming
+	address is down.
+
+	2 - Ignore packets received if interface associated with the incoming
+	address is down or has no carrier.
+
+	Default value is 0. Note that some distributions enable it
+	in startup scripts.
+
 arp_filter - BOOLEAN
 	1 - Allows you to have multiple network interfaces on the same
 	subnet, and have the ARPs for each interface be answered
diff -rupN linux-4.4.47/drivers/net/macvlan.c vyos-kernel/drivers/net/macvlan.c
--- linux-4.4.47/drivers/net/macvlan.c	2017-02-04 00:45:26.000000000 -0800
+++ vyos-kernel/drivers/net/macvlan.c	2017-08-01 16:24:20.156304032 -0700
@@ -289,6 +289,7 @@ static void macvlan_process_broadcast(st
 					  MACVLAN_MODE_PRIVATE |
 					  MACVLAN_MODE_VEPA    |
 					  MACVLAN_MODE_PASSTHRU|
+					  MACVLAN_MODE_VRRP    |
 					  MACVLAN_MODE_BRIDGE);
 		else if (src->mode == MACVLAN_MODE_VEPA)
 			/* flood to everyone except source */
@@ -423,6 +424,11 @@ static rx_handler_result_t macvlan_handl
 		    src->mode != MACVLAN_MODE_BRIDGE) {
 			/* forward to original port. */
 			vlan = src;
+	                if (vlan->mode == MACVLAN_MODE_VRRP) {
+				skb->dev = vlan->lowerdev;
+				skb->pkt_type = PACKET_MULTICAST;
+				return RX_HANDLER_PASS;
+			}
 			ret = macvlan_broadcast_one(skb, vlan, eth, 0) ?:
 			      netif_rx(skb);
 			handle_res = RX_HANDLER_CONSUMED;
@@ -444,6 +450,12 @@ static rx_handler_result_t macvlan_handl
 	if (vlan == NULL)
 		return RX_HANDLER_PASS;
 
+	if (vlan->mode == MACVLAN_MODE_VRRP) {
+		skb->dev = vlan->lowerdev;
+		skb->pkt_type = PACKET_HOST;
+		return RX_HANDLER_PASS;
+	}
+
 	dev = vlan->dev;
 	if (unlikely(!(dev->flags & IFF_UP))) {
 		kfree_skb(skb);
@@ -1143,6 +1155,7 @@ static int macvlan_validate(struct nlatt
 		case MACVLAN_MODE_BRIDGE:
 		case MACVLAN_MODE_PASSTHRU:
 		case MACVLAN_MODE_SOURCE:
+		case MACVLAN_MODE_VRRP:
 			break;
 		default:
 			return -EINVAL;
diff -rupN linux-4.4.47/drivers/net/tun.c vyos-kernel/drivers/net/tun.c
--- linux-4.4.47/drivers/net/tun.c	2017-02-04 00:45:26.000000000 -0800
+++ vyos-kernel/drivers/net/tun.c	2017-08-01 16:24:20.164304063 -0700
@@ -60,6 +60,7 @@
 #include <linux/if_arp.h>
 #include <linux/if_ether.h>
 #include <linux/if_tun.h>
+#include <linux/if_tunnel.h>
 #include <linux/if_vlan.h>
 #include <linux/crc32.h>
 #include <linux/nsproxy.h>
@@ -204,6 +205,12 @@ struct tun_struct {
 	struct list_head disabled;
 	void *security;
 	u32 flow_count;
+
+	/* Vyatta extensions for remote statistics and speed */
+	uint8_t			duplex;
+	uint32_t		speed;
+	struct rtnl_link_stats64 *link_stats;
+	struct vy_ip_tunnel_info	info;
 };
 
 #ifdef CONFIG_TUN_VNET_CROSS_LE
@@ -547,6 +554,7 @@ static void __tun_detach(struct tun_file
 			    tun->dev->reg_state == NETREG_REGISTERED)
 				unregister_netdevice(tun->dev);
 		}
+		kfree(tun->link_stats);
 		sock_put(&tfile->sk);
 	}
 }
@@ -921,6 +929,94 @@ static netdev_features_t tun_net_fix_fea
 
 	return (features & tun->set_features) | (features & ~TUN_USER_FEATURES);
 }
+
+/* Vyatta extension to allow an ioctl to set interface statistics */
+static int
+tun_net_set_stats(struct net_device *dev, const void __user *data)
+{
+	struct tun_struct *tun = netdev_priv(dev);
+	struct link_stats_rcu {
+		struct rtnl_link_stats64 link;
+		struct rcu_head rcu;
+	} *stats;
+	struct rtnl_link_stats64 *old;
+
+	if (!capable(CAP_NET_ADMIN))
+		return -EPERM;
+
+	stats = kmalloc(sizeof(*stats), GFP_USER);
+	if (!stats)
+		return -ENOMEM;
+
+	if (copy_from_user(&stats->link, data,
+			   sizeof(struct rtnl_link_stats64))) {
+		kfree(stats);
+		return -EFAULT;
+	}
+
+	old = xchg(&tun->link_stats, &stats->link);
+	if (old)
+		kfree_rcu(container_of(old, struct link_stats_rcu, link),
+			  rcu);
+
+	return 0;
+}
+
+static int
+tun_net_set_info(struct net_device *dev, const void __user *data)
+{
+	struct tun_struct *tun = netdev_priv(dev);
+	struct vy_ip_tunnel_info info;
+
+	if (!capable(CAP_NET_ADMIN))
+		return -EPERM;
+
+	if (copy_from_user(&info, data, sizeof(info)))
+		return -EFAULT;
+
+	strlcpy(tun->info.driver, info.driver, sizeof(tun->info.driver));
+	strlcpy(tun->info.bus, info.bus, sizeof(tun->info.bus));
+	return 0;
+}
+
+static int
+tun_net_ioctl(struct net_device *dev, struct ifreq *ifr, int cmd)
+{
+	switch(cmd) {
+	case SIOCTUNNELSTATS:
+		return tun_net_set_stats(dev, ifr->ifr_ifru.ifru_data);
+	case SIOCTUNNELINFO:
+		return tun_net_set_info(dev, ifr->ifr_ifru.ifru_data);
+	default:
+		return -EOPNOTSUPP;
+	}
+}
+
+static struct rtnl_link_stats64 *
+tun_net_get_stats64(struct net_device *dev, struct rtnl_link_stats64 *storage)
+{
+	struct tun_struct *tun = netdev_priv(dev);
+	struct rtnl_link_stats64 *stats;
+
+	rcu_read_lock();
+	stats = rcu_dereference(tun->link_stats);
+	if (stats) {
+		/* Stats received from device */
+		*storage = *stats;
+		rcu_read_unlock();
+
+		/* Add tunnel detected errors to mix */
+		storage->tx_dropped += dev->stats.tx_dropped;
+		storage->rx_dropped += dev->stats.rx_dropped;
+		storage->rx_frame_errors += dev->stats.rx_frame_errors;
+		return storage;
+	}
+	rcu_read_unlock();
+
+	netdev_stats_to_stats64(storage, &dev->stats);
+	return storage;
+}
+
 #ifdef CONFIG_NET_POLL_CONTROLLER
 static void tun_poll_controller(struct net_device *dev)
 {
@@ -959,6 +1055,8 @@ static const struct net_device_ops tap_n
 	.ndo_change_mtu		= tun_net_change_mtu,
 	.ndo_fix_features	= tun_net_fix_features,
 	.ndo_set_rx_mode	= tun_net_mclist,
+	.ndo_get_stats64	= tun_net_get_stats64,
+	.ndo_do_ioctl		= tun_net_ioctl,
 	.ndo_set_mac_address	= eth_mac_addr,
 	.ndo_validate_addr	= eth_validate_addr,
 	.ndo_select_queue	= tun_select_queue,
@@ -1459,6 +1557,8 @@ static void tun_setup(struct net_device
 
 	tun->owner = INVALID_UID;
 	tun->group = INVALID_GID;
+	tun->speed = SPEED_UNKNOWN;
+	tun->duplex = DUPLEX_UNKNOWN;
 
 	dev->ethtool_ops = &tun_ethtool_ops;
 	dev->destructor = tun_free_netdev;
@@ -1697,6 +1797,11 @@ static int tun_set_iff(struct net *net,
 
 		spin_lock_init(&tun->lock);
 
+		strlcpy(tun->info.driver, DRV_NAME, sizeof(tun->info.driver));
+		strlcpy(tun->info.bus,
+			(ifr->ifr_flags & IFF_TUN) ? "tun" : "tap",
+			sizeof(tun->info.bus));
+
 		err = security_tun_dev_alloc_security(&tun->security);
 		if (err < 0)
 			goto err_free_dev;
@@ -2299,34 +2404,41 @@ static struct miscdevice tun_miscdev = {
 
 static int tun_get_settings(struct net_device *dev, struct ethtool_cmd *cmd)
 {
+	struct tun_struct *tun = netdev_priv(dev);
+
 	cmd->supported		= 0;
 	cmd->advertising	= 0;
-	ethtool_cmd_speed_set(cmd, SPEED_10);
-	cmd->duplex		= DUPLEX_FULL;
+	ethtool_cmd_speed_set(cmd, tun->speed);
+	cmd->duplex		= tun->duplex;
 	cmd->port		= PORT_TP;
 	cmd->phy_address	= 0;
 	cmd->transceiver	= XCVR_INTERNAL;
-	cmd->autoneg		= AUTONEG_DISABLE;
+	cmd->autoneg		= AUTONEG_ENABLE;
 	cmd->maxtxpkt		= 0;
 	cmd->maxrxpkt		= 0;
 	return 0;
 }
 
+static int tun_set_settings(struct net_device *dev, struct ethtool_cmd *ecmd)
+{
+	struct tun_struct *tun = netdev_priv(dev);
+
+	if (ecmd->autoneg != AUTONEG_ENABLE)
+		return -EOPNOTSUPP;
+
+	tun->speed = ethtool_cmd_speed(ecmd);
+	tun->duplex = ecmd->duplex;
+
+	return 0;
+}
+
 static void tun_get_drvinfo(struct net_device *dev, struct ethtool_drvinfo *info)
 {
 	struct tun_struct *tun = netdev_priv(dev);
 
-	strlcpy(info->driver, DRV_NAME, sizeof(info->driver));
+	strlcpy(info->driver, tun->info.driver, sizeof(info->driver));
 	strlcpy(info->version, DRV_VERSION, sizeof(info->version));
-
-	switch (tun->flags & TUN_TYPE_MASK) {
-	case IFF_TUN:
-		strlcpy(info->bus_info, "tun", sizeof(info->bus_info));
-		break;
-	case IFF_TAP:
-		strlcpy(info->bus_info, "tap", sizeof(info->bus_info));
-		break;
-	}
+	strlcpy(info->bus_info, tun->info.bus, sizeof(info->bus_info));
 }
 
 static u32 tun_get_msglevel(struct net_device *dev)
@@ -2349,6 +2461,7 @@ static void tun_set_msglevel(struct net_
 
 static const struct ethtool_ops tun_ethtool_ops = {
 	.get_settings	= tun_get_settings,
+	.set_settings	= tun_set_settings,
 	.get_drvinfo	= tun_get_drvinfo,
 	.get_msglevel	= tun_get_msglevel,
 	.set_msglevel	= tun_set_msglevel,
diff -rupN linux-4.4.47/drivers/net/virtio_net.c vyos-kernel/drivers/net/virtio_net.c
--- linux-4.4.47/drivers/net/virtio_net.c	2017-02-04 00:45:26.000000000 -0800
+++ vyos-kernel/drivers/net/virtio_net.c	2017-08-01 16:24:20.168304078 -0700
@@ -146,6 +146,10 @@ struct virtnet_info {
 	virtio_net_ctrl_ack ctrl_status;
 	u8 ctrl_promisc;
 	u8 ctrl_allmulti;
+
+	/* Ethtool settings */
+	u8 duplex;
+	u32 speed;
 };
 
 struct padded_vnet_hdr {
@@ -1378,6 +1382,60 @@ static void virtnet_get_channels(struct
 	channels->other_count = 0;
 }
 
+/* Check if the user is trying to change anything besides speed/duplex */
+static bool virtnet_validate_ethtool_cmd(const struct ethtool_cmd *cmd)
+{
+	struct ethtool_cmd diff1 = *cmd;
+	struct ethtool_cmd diff2 = {};
+
+	/* cmd is always set so we need to clear it, validate the port type
+	 * and also without autonegotiation we can ignore advertising
+	 */
+	ethtool_cmd_speed_set(&diff1, 0);
+	diff2.port = PORT_OTHER;
+	diff1.advertising = 0;
+	diff1.duplex = 0;
+	diff1.cmd = 0;
+
+	return !memcmp(&diff1, &diff2, sizeof(diff1));
+}
+
+static int virtnet_set_settings(struct net_device *dev, struct ethtool_cmd *cmd)
+{
+	struct virtnet_info *vi = netdev_priv(dev);
+	u32 speed;
+
+	speed = ethtool_cmd_speed(cmd);
+	/* don't allow custom speed and duplex */
+	if (!ethtool_validate_speed(speed) ||
+	    !ethtool_validate_duplex(cmd->duplex) ||
+	    !virtnet_validate_ethtool_cmd(cmd))
+		return -EINVAL;
+	vi->speed = speed;
+	vi->duplex = cmd->duplex;
+
+	return 0;
+}
+
+static int virtnet_get_settings(struct net_device *dev, struct ethtool_cmd *cmd)
+{
+	struct virtnet_info *vi = netdev_priv(dev);
+
+	ethtool_cmd_speed_set(cmd, vi->speed);
+	cmd->duplex = vi->duplex;
+	cmd->port = PORT_OTHER;
+
+	return 0;
+}
+
+static void virtnet_init_settings(struct net_device *dev)
+{
+	struct virtnet_info *vi = netdev_priv(dev);
+
+	vi->speed = SPEED_UNKNOWN;
+	vi->duplex = DUPLEX_UNKNOWN;
+}
+
 static const struct ethtool_ops virtnet_ethtool_ops = {
 	.get_drvinfo = virtnet_get_drvinfo,
 	.get_link = ethtool_op_get_link,
@@ -1385,6 +1443,8 @@ static const struct ethtool_ops virtnet_
 	.set_channels = virtnet_set_channels,
 	.get_channels = virtnet_get_channels,
 	.get_ts_info = ethtool_op_get_ts_info,
+	.get_settings = virtnet_get_settings,
+	.set_settings = virtnet_set_settings,
 };
 
 #define MIN_MTU 68
@@ -1863,6 +1923,8 @@ static int virtnet_probe(struct virtio_d
 	netif_set_real_num_tx_queues(dev, vi->curr_queue_pairs);
 	netif_set_real_num_rx_queues(dev, vi->curr_queue_pairs);
 
+	virtnet_init_settings(dev);
+
 	err = register_netdev(dev);
 	if (err) {
 		pr_debug("virtio_net: registering device failed\n");
diff -rupN linux-4.4.47/fs/notify/inotify/inotify_user.c vyos-kernel/fs/notify/inotify/inotify_user.c
--- linux-4.4.47/fs/notify/inotify/inotify_user.c	2017-02-04 00:45:26.000000000 -0800
+++ vyos-kernel/fs/notify/inotify/inotify_user.c	2017-08-01 16:24:21.088307640 -0700
@@ -24,6 +24,7 @@
 
 #include <linux/file.h>
 #include <linux/fs.h> /* struct inode */
+#include <linux/mount.h>
 #include <linux/fsnotify_backend.h>
 #include <linux/idr.h>
 #include <linux/init.h> /* fs_initcall */
@@ -86,6 +87,94 @@ struct ctl_table inotify_table[] = {
 };
 #endif /* CONFIG_SYSCTL */
 
+#ifdef CONFIG_INOTIFY_STACKFS
+
+static DEFINE_RWLOCK(inotify_fs_lock);
+static LIST_HEAD(inotify_fs_list);
+
+static inline struct file_system_type* peek_fs_type(struct path *path)
+{
+	return path->mnt->mnt_sb->s_type;
+}
+
+static struct inotify_stackfs* inotify_get_stackfs(struct path *path)
+{
+	struct file_system_type *fs;
+	struct inotify_stackfs *fse, *ret = NULL;
+
+	fs = peek_fs_type(path);
+
+	read_lock(&inotify_fs_lock);
+	list_for_each_entry(fse, &inotify_fs_list, list) {
+		if (fse->fs_type == fs) {
+			ret = fse;
+			break;
+		}
+	}
+	read_unlock(&inotify_fs_lock);
+
+	return ret;
+}
+
+static inline void inotify_put_stackfs(struct inotify_stackfs *fs)
+{
+}
+
+int inotify_register_stackfs(struct inotify_stackfs *fs)
+{
+	int ret = 0;
+	struct inotify_stackfs *fse;
+
+	BUG_ON(IS_ERR_OR_NULL(fs->fs_type));
+	BUG_ON(IS_ERR_OR_NULL(fs->func));
+
+	INIT_LIST_HEAD(&fs->list);
+
+	write_lock(&inotify_fs_lock);
+	list_for_each_entry(fse, &inotify_fs_list, list) {
+		if (fse->fs_type == fs->fs_type) {
+			write_unlock(&inotify_fs_lock);
+			ret = -EBUSY;
+			goto out;
+		}
+	}
+	list_add_tail(&fs->list, &inotify_fs_list);
+	write_unlock(&inotify_fs_lock);
+
+out:
+	return ret;
+}
+EXPORT_SYMBOL_GPL(inotify_register_stackfs);
+
+void inotify_unregister_stackfs(struct inotify_stackfs *fs)
+{
+	struct inotify_stackfs *fse, *n;
+
+	write_lock(&inotify_fs_lock);
+	list_for_each_entry_safe(fse, n, &inotify_fs_list, list) {
+		if (fse == fs) {
+			list_del(&fse->list);
+			break;
+		}
+	}
+	write_unlock(&inotify_fs_lock);
+}
+EXPORT_SYMBOL_GPL(inotify_unregister_stackfs);
+
+#else
+
+static inline struct inotify_stackfs* inotify_get_stackfs(struct path *path)
+{
+	return NULL;
+}
+
+static inline void inotify_put_stackfs(struct inotify_stackfs *fs)
+{
+}
+
+#endif /* CONFIG_INOTIFY_STACKFS */
+
+
 static inline __u32 inotify_arg_to_mask(u32 arg)
 {
 	__u32 mask;
@@ -329,7 +418,7 @@ static const struct file_operations inot
 /*
  * find_inode - resolve a user-given path to a specific inode
  */
-static int inotify_find_inode(const char __user *dirname, struct path *path, unsigned flags)
+static inline int __inotify_find_inode(const char __user *dirname, struct path *path, unsigned flags)
 {
 	int error;
 
@@ -343,6 +432,27 @@ static int inotify_find_inode(const char
 	return error;
 }
 
+static int inotify_find_inode(const char __user *dirname, struct path *path, unsigned flags)
+{
+	int ret;
+	struct path tpath;
+	struct inotify_stackfs *fse;
+
+	ret = __inotify_find_inode(dirname, &tpath, flags);
+	if (ret)
+		return ret;
+	fse = inotify_get_stackfs(&tpath);
+	if (fse == NULL) {
+		*path = tpath;
+		return 0;
+	}
+	ret = fse->func(path, &tpath);
+	inotify_put_stackfs(fse);
+	path_put(&tpath);
+
+	return ret;
+}
+
 static int inotify_add_to_idr(struct idr *idr, spinlock_t *idr_lock,
 			      struct inotify_inode_mark *i_mark)
 {
diff -rupN linux-4.4.47/fs/notify/inotify/Kconfig vyos-kernel/fs/notify/inotify/Kconfig
--- linux-4.4.47/fs/notify/inotify/Kconfig	2017-02-04 00:45:26.000000000 -0800
+++ vyos-kernel/fs/notify/inotify/Kconfig	2017-08-01 16:24:21.088307640 -0700
@@ -15,3 +15,12 @@ config INOTIFY_USER
 	  For more information, see <file:Documentation/filesystems/inotify.txt>
 
 	  If unsure, say Y.
+	  
+config INOTIFY_STACKFS
+	bool "Inotify support for stackable filesystem"
+	select INOTIFY_USER
+	default y
+	---help---
+	  Say Y here to enable inotify support for stackable filesystem.
+
+	  If unsure, say N.
diff -rupN linux-4.4.47/fs/overlayfs/super.c vyos-kernel/fs/overlayfs/super.c
--- linux-4.4.47/fs/overlayfs/super.c	2017-02-04 00:45:26.000000000 -0800
+++ vyos-kernel/fs/overlayfs/super.c	2017-08-01 16:24:21.108307717 -0700
@@ -19,6 +19,7 @@
 #include <linux/sched.h>
 #include <linux/statfs.h>
 #include <linux/seq_file.h>
+#include <linux/inotify.h>
 #include "overlayfs.h"
 
 MODULE_AUTHOR("Miklos Szeredi <miklos@szeredi.hu>");
@@ -1163,13 +1164,39 @@ static struct file_system_type ovl_fs_ty
 };
 MODULE_ALIAS_FS("overlay");
 
+static int ovl_inotify_path(struct path *dst, struct path *src)
+{
+	ovl_path_real(src->dentry, dst);
+
+	path_get(dst);
+
+	return 0;
+}
+
+static struct inotify_stackfs ovl_inotify = {
+	.fs_type	= &ovl_fs_type,
+	.func		= ovl_inotify_path,
+};
+
 static int __init ovl_init(void)
 {
-	return register_filesystem(&ovl_fs_type);
+	int ret;
+
+	ret = register_filesystem(&ovl_fs_type);
+	if (ret)
+		return ret;
+	ret = inotify_register_stackfs(&ovl_inotify);
+	if (ret) {
+		pr_err("overlayfs: hook inotify error\n");
+		unregister_filesystem(&ovl_fs_type);
+	}
+
+	return ret;
 }
 
 static void __exit ovl_exit(void)
 {
+	inotify_unregister_stackfs(&ovl_inotify);
 	unregister_filesystem(&ovl_fs_type);
 }
 
diff -rupN linux-4.4.47/include/linux/inetdevice.h vyos-kernel/include/linux/inetdevice.h
--- linux-4.4.47/include/linux/inetdevice.h	2017-02-04 00:45:26.000000000 -0800
+++ vyos-kernel/include/linux/inetdevice.h	2017-08-01 16:24:21.192308043 -0700
@@ -128,6 +128,7 @@ static inline void ipv4_devconf_setall(s
 #define IN_DEV_ARP_ANNOUNCE(in_dev)	IN_DEV_MAXCONF((in_dev), ARP_ANNOUNCE)
 #define IN_DEV_ARP_IGNORE(in_dev)	IN_DEV_MAXCONF((in_dev), ARP_IGNORE)
 #define IN_DEV_ARP_NOTIFY(in_dev)	IN_DEV_MAXCONF((in_dev), ARP_NOTIFY)
+#define IN_DEV_LINKFILTER(in_dev)	IN_DEV_MAXCONF((in_dev), LINKFILTER)
 
 struct in_ifaddr {
 	struct hlist_node	hash;
diff -rupN linux-4.4.47/include/linux/inotify.h vyos-kernel/include/linux/inotify.h
--- linux-4.4.47/include/linux/inotify.h	2017-02-04 00:45:26.000000000 -0800
+++ vyos-kernel/include/linux/inotify.h	2017-08-01 16:24:21.192308043 -0700
@@ -8,6 +8,8 @@
 
 #include <linux/sysctl.h>
 #include <uapi/linux/inotify.h>
+#include <linux/list.h>
+#include <linux/fs.h>
 
 extern struct ctl_table inotify_table[]; /* for sysctl */
 
@@ -19,4 +21,30 @@ extern struct ctl_table inotify_table[];
 			  IN_DONT_FOLLOW | IN_EXCL_UNLINK | IN_MASK_ADD | \
 			  IN_ISDIR | IN_ONESHOT)
 
+typedef int (*inotify_path_proc)(struct path *dst, struct path *src);
+
+struct inotify_stackfs {
+	struct list_head	list;		/* entry in inotify_fs_list */
+	struct file_system_type	*fs_type;	/* registed file_system_type */	
+	inotify_path_proc	func;		/* registed callback function */
+};
+
+#ifdef CONFIG_INOTIFY_STACKFS
+
+extern int inotify_register_stackfs(struct inotify_stackfs *fs);
+extern void inotify_unregister_stackfs(struct inotify_stackfs *fs);
+
+#else
+
+static inline int inotify_register_stackfs(struct inotify_stackfs *fs)
+{
+	return 0;
+}
+
+static inline void inotify_unregister_stackfs(struct inotify_stackfs *fs)
+{
+}
+
+#endif	/* CONFIG_INOTIFY_STACKFS */
+
 #endif	/* _LINUX_INOTIFY_H */
diff -rupN linux-4.4.47/include/linux/ipv6.h vyos-kernel/include/linux/ipv6.h
--- linux-4.4.47/include/linux/ipv6.h	2017-02-04 00:45:26.000000000 -0800
+++ vyos-kernel/include/linux/ipv6.h	2017-08-01 16:24:21.192308043 -0700
@@ -60,6 +60,7 @@ struct ipv6_devconf {
 		struct in6_addr secret;
 	} stable_secret;
 	__s32		use_oif_addrs_only;
+	__s32		link_filter;	/* Vyatta */
 	void		*sysctl;
 };
 
diff -rupN linux-4.4.47/include/uapi/linux/ethtool.h vyos-kernel/include/uapi/linux/ethtool.h
--- linux-4.4.47/include/uapi/linux/ethtool.h	2017-02-04 00:45:26.000000000 -0800
+++ vyos-kernel/include/uapi/linux/ethtool.h	2017-08-01 16:24:21.308308492 -0700
@@ -1316,11 +1316,28 @@ enum ethtool_sfeatures_retval_bits {
 
 #define SPEED_UNKNOWN		-1
 
+static inline int ethtool_validate_speed(__u32 speed)
+{
+	return speed <= INT_MAX || speed == SPEED_UNKNOWN;
+}
+
 /* Duplex, half or full. */
 #define DUPLEX_HALF		0x00
 #define DUPLEX_FULL		0x01
 #define DUPLEX_UNKNOWN		0xff
 
+static inline int ethtool_validate_duplex(__u8 duplex)
+{
+	switch (duplex) {
+	case DUPLEX_HALF:
+	case DUPLEX_FULL:
+	case DUPLEX_UNKNOWN:
+		return 1;
+	}
+
+	return 0;
+}
+
 /* Which connector port. */
 #define PORT_TP			0x00
 #define PORT_AUI		0x01
diff -rupN linux-4.4.47/include/uapi/linux/if_link.h vyos-kernel/include/uapi/linux/if_link.h
--- linux-4.4.47/include/uapi/linux/if_link.h	2017-02-04 00:45:26.000000000 -0800
+++ vyos-kernel/include/uapi/linux/if_link.h	2017-08-01 16:24:21.312308507 -0700
@@ -380,6 +380,7 @@ enum macvlan_mode {
 	MACVLAN_MODE_BRIDGE  = 4, /* talk to bridge ports directly */
 	MACVLAN_MODE_PASSTHRU = 8,/* take over the underlying device */
 	MACVLAN_MODE_SOURCE  = 16,/* use source MAC address list to assign */
+	MACVLAN_MODE_VRRP    = 32,/* pass all packets to lowerdev */
 };
 
 enum macvlan_macaddr_mode {
diff -rupN linux-4.4.47/include/uapi/linux/if_tunnel.h vyos-kernel/include/uapi/linux/if_tunnel.h
--- linux-4.4.47/include/uapi/linux/if_tunnel.h	2017-02-04 00:45:26.000000000 -0800
+++ vyos-kernel/include/uapi/linux/if_tunnel.h	2017-08-01 16:24:21.312308507 -0700
@@ -18,6 +18,15 @@
 #define SIOCDEL6RD      (SIOCDEVPRIVATE + 10)
 #define SIOCCHG6RD      (SIOCDEVPRIVATE + 11)
 
+/* Vyatta extension for setting tunnel info from application */
+#define SIOCTUNNELSTATS	(SIOCDEVPRIVATE + 14)
+#define SIOCTUNNELINFO	(SIOCDEVPRIVATE + 15)
+
+struct vy_ip_tunnel_info {
+	char driver[32];
+	char bus[32];
+};
+
 #define GRE_CSUM	__cpu_to_be16(0x8000)
 #define GRE_ROUTING	__cpu_to_be16(0x4000)
 #define GRE_KEY		__cpu_to_be16(0x2000)
diff -rupN linux-4.4.47/include/uapi/linux/ip.h vyos-kernel/include/uapi/linux/ip.h
--- linux-4.4.47/include/uapi/linux/ip.h	2017-02-04 00:45:26.000000000 -0800
+++ vyos-kernel/include/uapi/linux/ip.h	2017-08-01 16:24:21.312308507 -0700
@@ -165,6 +165,7 @@ enum
 	IPV4_DEVCONF_IGMPV2_UNSOLICITED_REPORT_INTERVAL,
 	IPV4_DEVCONF_IGMPV3_UNSOLICITED_REPORT_INTERVAL,
 	IPV4_DEVCONF_IGNORE_ROUTES_WITH_LINKDOWN,
+	IPV4_DEVCONF_LINKFILTER,	/* Vyatta only */
 	__IPV4_DEVCONF_MAX
 };
 
diff -rupN linux-4.4.47/include/uapi/linux/ipv6.h vyos-kernel/include/uapi/linux/ipv6.h
--- linux-4.4.47/include/uapi/linux/ipv6.h	2017-02-04 00:45:26.000000000 -0800
+++ vyos-kernel/include/uapi/linux/ipv6.h	2017-08-01 16:24:21.312308507 -0700
@@ -174,6 +174,7 @@ enum {
 	DEVCONF_USE_OIF_ADDRS_ONLY,
 	DEVCONF_ACCEPT_RA_MIN_HOP_LIMIT,
 	DEVCONF_IGNORE_ROUTES_WITH_LINKDOWN,
+	DEVCONF_LINK_FILTER,
 	DEVCONF_MAX
 };
 
diff -rupN linux-4.4.47/net/dccp/input.c vyos-kernel/net/dccp/input.c
--- linux-4.4.47/net/dccp/input.c	2017-02-04 00:45:26.000000000 -0800
+++ vyos-kernel/net/dccp/input.c	2017-08-01 16:24:21.444309018 -0700
@@ -606,7 +606,8 @@ int dccp_rcv_state_process(struct sock *
 			if (inet_csk(sk)->icsk_af_ops->conn_request(sk,
 								    skb) < 0)
 				return 1;
-			goto discard;
+			consume_skb(skb);
+			return 0;
 		}
 		if (dh->dccph_type == DCCP_PKT_RESET)
 			goto discard;
diff -rupN linux-4.4.47/net/ipv4/devinet.c vyos-kernel/net/ipv4/devinet.c
--- linux-4.4.47/net/ipv4/devinet.c	2017-02-04 00:45:26.000000000 -0800
+++ vyos-kernel/net/ipv4/devinet.c	2017-08-01 16:24:21.452309049 -0700
@@ -2196,6 +2196,8 @@ static struct devinet_sysctl_table {
 					      "promote_secondaries"),
 		DEVINET_SYSCTL_FLUSHING_ENTRY(ROUTE_LOCALNET,
 					      "route_localnet"),
+		/* Vyatta */
+		DEVINET_SYSCTL_RW_ENTRY(LINKFILTER, "link_filter"),
 	},
 };
 
diff -rupN linux-4.4.47/net/ipv6/addrconf.c vyos-kernel/net/ipv6/addrconf.c
--- linux-4.4.47/net/ipv6/addrconf.c	2017-02-04 00:45:26.000000000 -0800
+++ vyos-kernel/net/ipv6/addrconf.c	2017-08-01 16:24:21.464309095 -0700
@@ -4684,6 +4684,7 @@ static inline void ipv6_store_devconf(st
 	array[DEVCONF_IGNORE_ROUTES_WITH_LINKDOWN] = cnf->ignore_routes_with_linkdown;
 	/* we omit DEVCONF_STABLE_SECRET for now */
 	array[DEVCONF_USE_OIF_ADDRS_ONLY] = cnf->use_oif_addrs_only;
+	array[DEVCONF_LINK_FILTER] = cnf->link_filter;
 }
 
 static inline size_t inet6_ifla6_size(void)
@@ -5740,6 +5741,14 @@ static struct addrconf_sysctl_table
 			.mode		= 0644,
 			.proc_handler	= addrconf_sysctl_ignore_routes_with_linkdown,
 		},
+		/* Vyatta */
+		{
+			.procname       = "link_filter",
+			.data           = &ipv6_devconf.link_filter,
+			.maxlen         = sizeof(int),
+			.mode           = 0644,
+			.proc_handler   = proc_dointvec
+		},
 		{
 			/* sentinel */
 		}
diff -rupN linux-4.4.47/net/ipv6/route.c vyos-kernel/net/ipv6/route.c
--- linux-4.4.47/net/ipv6/route.c	2017-02-04 00:45:26.000000000 -0800
+++ vyos-kernel/net/ipv6/route.c	2017-08-01 16:24:21.472309126 -0700
@@ -594,6 +594,15 @@ static inline int rt6_check_dev(struct r
 	return 0;
 }
 
+static inline int rt6_link_filter(struct rt6_info *rt)
+{
+	struct net_device *dev = rt->dst.dev;
+	int linkf = __in6_dev_get(dev)->cnf.link_filter;
+
+	return (linkf && !netif_running(dev))
+		|| (linkf > 1 && !netif_carrier_ok(dev));
+}
+
 static inline enum rt6_nud_state rt6_check_neigh(struct rt6_info *rt)
 {
 	struct neighbour *neigh;
@@ -633,6 +642,9 @@ static int rt6_score_route(struct rt6_in
 	m = rt6_check_dev(rt, oif);
 	if (!m && (strict & RT6_LOOKUP_F_IFACE))
 		return RT6_NUD_FAIL_HARD;
+	if (rt6_link_filter(rt))
+		return -1;
+
 #ifdef CONFIG_IPV6_ROUTER_PREF
 	m |= IPV6_DECODE_PREF(IPV6_EXTRACT_PREF(rt->rt6i_flags)) << 2;
 #endif
