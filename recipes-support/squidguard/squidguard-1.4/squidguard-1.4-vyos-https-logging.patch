--- a/src/sgLog.c	2017-08-15 13:04:08.988548773 -0700
+++ b/src/sgLog.c	2017-08-15 09:35:18.386218885 -0700
@@ -17,6 +17,7 @@
 */
 
 #include "sg.h"
+#include <arpa/inet.h>
 
 extern int globalDebug;    /* from main.c */
 extern int globalPid;      /* from main.c */
@@ -111,6 +112,63 @@ void sgLogFatalError(format, va_alist)
   sgEmergency();
 }
 
+// if requested URL is of form https://IP-address then try resolving
+// IP-address. Also, append ':443' to URL before returning since squidguard
+// logs https URLs as 'URL:443' in non-transparent mode
+char *log_https(char *url, char *https_str, char *rep)
+{
+  char *p;
+
+  // return if https_str isn't present in url
+  if(!(p = strstr(url, https_str)))
+    return url;
+
+  static char buffer[MAX_BUF];
+  char tmpbuffer[MAX_BUF];
+  memset(buffer, '\0', sizeof(buffer));
+  memset(tmpbuffer, '\0', sizeof(tmpbuffer));
+
+  // replace https_str with rep in url and then copy url to buffer
+  strncpy(buffer, url, p-url);
+  buffer[p-url] = '\0';
+  sprintf(buffer+(p-url), "%s%s", rep, p+strlen(https_str));
+
+  // remove '/' at the end if any
+  p = strrchr (buffer, '/');
+  if (p != NULL)
+  {
+    if (strlen(p) == 1)
+    {
+      strncpy(tmpbuffer, buffer, strlen(buffer)-1);
+      memset(buffer, '\0', sizeof(buffer));
+      strcpy(buffer, tmpbuffer);
+    }
+  }
+
+  // if buffer is an IP address; attempt a host lookup
+  struct sockaddr_in sa;
+  int result = inet_pton(AF_INET, buffer, &(sa.sin_addr));
+  if (result == 1)
+  {
+    struct in_addr iaddr;
+    inet_aton(buffer, &iaddr);
+    struct hostent *host;
+    if((host = gethostbyaddr((const void *)&iaddr,
+               sizeof(iaddr), AF_INET)) != NULL)
+    {
+      memset(buffer, '\0', sizeof(buffer));
+      strncpy(buffer, (char *)host->h_name, sizeof(buffer));
+    }
+  }
+
+  // append :443 to the end of buffer
+  memset(tmpbuffer, '\0', sizeof(tmpbuffer));
+  strcpy(tmpbuffer, buffer);
+  memset(buffer, '\0', sizeof(buffer));
+  sprintf(buffer, "%s%s", tmpbuffer, ":443");
+
+  return buffer;
+}
 
 #if __STDC__
 void sgLogRequest(struct LogFile *log,
@@ -175,11 +233,17 @@ void sgLogRequest(log, req, acl, aclpass
   }
   else
     targetclass =  aclpass->name;
+
+    // vyatta uses vyattaguard's IP based categorization to enable filtering of
+    // https URLs in transparent mode. Before logging https drops, we attempt
+    // to resolve IP addr in requested https URL and log with ':443' appended
+    char *orig = log_https(req->orig, "https://", "");
+
   sgLog(log->stat,"Request(%s/%s/%s) %s %s/%s %s %s %s",
 	srcclass,
 	targetclass,
 	rew,
-        req->orig,
+        orig,
        req->src,
        srcDomain,
 	ident,
